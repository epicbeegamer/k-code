<!doctype html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>FENZ Monitor — Neocities Friendly</title>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="anonymous">
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin="anonymous"></script>
<style>
  :root{--bg:#0b1020;--card:#0f172a;--muted:#94a3b8;--text:#e2e8f0;--accent:#60a5fa;--ok:#34d399;--warn:#fbbf24}
  *{box-sizing:border-box}
  body{margin:0;background:var(--bg);color:var(--text);font-family:system-ui,-apple-system,Segoe UI,Roboto,sans-serif}
  header{padding:12px;border-bottom:1px solid #1f2a44;display:flex;gap:8px;align-items:center;flex-wrap:wrap}
  h1{margin:0;font-size:18px}
  .pill{padding:6px 10px;border:1px solid #1f2a44;border-radius:999px;background:#0c1a34;color:#cbd5e1;font-size:12px}
  .btn{padding:10px 14px;border-radius:10px;border:1px solid #1f2a44;background:#0c1a34;color:var(--text);cursor:pointer}
  .btn[disabled]{opacity:.6;cursor:not-allowed}
  #map{height:52vh}
  .wrap{display:grid;grid-template-columns:1fr 380px;gap:12px;padding:12px}
  @media(max-width:900px){.wrap{grid-template-columns:1fr}}
  .card{background:var(--card);border:1px solid #1f2a44;border-radius:12px;padding:12px}
  label{color:var(--muted);font-size:13px}
  input,textarea,select{background:#0b1a34;color:var(--text);border:1px solid #1f2a44;padding:8px;border-radius:8px;width:100%}
  textarea{min-height:80px;resize:vertical}
  .row{display:flex;gap:8px;align-items:center;flex-wrap:wrap}
  .event{border:1px solid #1f2a44;border-radius:10px;padding:8px;margin:8px 0;background:#0b1a34}
  .event.highlight{outline:2px solid var(--accent)}
  .hint{color:var(--muted);font-size:12px}
  .badge{background:#12264d;color:#c7d2fe;border-radius:999px;padding:2px 8px;font-size:12px}
  .stn{background:#064e3b;color:#a7f3d0}
  .meter{height:10px;background:#1f2a44;border-radius:999px;overflow:hidden}
  .bar{height:100%;width:0;background:linear-gradient(90deg,#2563eb,#22d3ee)}
  .mono{font-family:ui-monospace,Consolas,monospace;font-size:12px;white-space:pre-wrap}
</style>
</head>
<body>
<header>
  <h1>FENZ Monitor — Neocities Friendly</h1>
  <span class="pill" id="secureBadge">Checking security…</span>
  <span class="pill" id="speechBadge">Speech: checking…</span>
  <button class="btn" id="btnMic" title="Needs HTTPS (Netlify/Vercel)">Start Mic (HTTPS only)</button>
  <button class="btn" id="btnStop" disabled>Stop</button>
</header>

<div id="map"></div>

<div class="wrap">
  <div class="card">
    <div class="row" style="margin-bottom:8px">
      <div style="flex:1">
        <label>Search</label>
        <input id="search" placeholder="Filter by text, address, or Station #" />
      </div>
      <div>
        <label>Incident</label>
        <select id="incidentFilter">
          <option value="">All</option><option value="vegetation">Vegetation</option><option value="structure">Structure</option>
          <option value="medical">Medical</option><option value="mva">MVA</option><option value="alarm">Alarm</option><option value="hazmat">HazMat</option>
        </select>
      </div>
      <button class="btn" id="btnClear">Clear</button>
    </div>
    <div id="events"></div>
  </div>

  <div class="card">
    <label>Type or paste the radio message:</label>
    <textarea id="manual" placeholder="Example: Vegetation fire, 12 High Street, Hastings, Station 28 responding"></textarea>
    <div class="row" style="margin-top:8px">
      <button class="btn" id="btnAdd">Add Event</button>
      <span class="hint">Auto pans and highlights newest.</span>
    </div>
    <h3 style="margin:10px 0 6px">Live transcript (if HTTPS)</h3>
    <div id="liveText" class="mono hint">(mic requires HTTPS; this won’t work on Neocities free)</div>
    <div class="row" style="gap:14px;margin-top:8px">
      <div style="flex:1">
        <div class="hint">Mic level</div>
        <div class="meter"><div class="bar" id="levelBar"></div></div>
      </div>
      <div class="hint" id="micHint">On HTTPS, click Start Mic and allow access.</div>
    </div>
  </div>
</div>

<script>
/* ====== Security / capability badges ====== */
const isSecure = location.protocol === 'https:' || location.hostname === 'localhost' || location.hostname === '127.0.0.1';
const secureBadge = document.getElementById('secureBadge');
secureBadge.textContent = isSecure ? 'Secure context: OK' : 'Not secure: mic disabled';
secureBadge.style.background = isSecure ? '#0c1a34' : '#4a1d1d';
const hasSpeech = ('webkitSpeechRecognition' in window) || ('SpeechRecognition' in window);
document.getElementById('speechBadge').textContent = 'Speech: ' + (hasSpeech ? 'available' : 'not available');

/* ====== Map ====== */
const map = L.map('map').setView([-41.0,174.0],6);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{maxZoom:19,attribution:'&copy; OpenStreetMap'}).addTo(map);
let markers = [];
function clearMarkers(){ markers.forEach(m=>m.remove()); markers=[]; }
function addMarker(ev, open=false){
  if(!(ev.lat && ev.lon)) return;
  const m=L.circleMarker([ev.lat,ev.lon],{radius:8,weight:2}).addTo(map);
  m.bindPopup(`
    <div>
      <strong>${ev.summary||'Event'}</strong><br>
      ${ev.station?`<span class="badge stn">Station ${ev.station}</span><br>`:''}
      <span class="hint">${ev.address||'Unknown location'}</span><br>
      <span class="hint">${new Date(ev.timestamp).toLocaleString()}</span><br>
      <div class="hint">${ev.transcript||''}</div>
    </div>`);
  if(open){ m.openPopup(); }
  markers.push(m);
}

/* ====== Store / render ====== */
let allEvents=[]; try{ allEvents = JSON.parse(localStorage.getItem('fenzNeo')||'[]'); }catch(e){}
function save(){ localStorage.setItem('fenzNeo', JSON.stringify(allEvents)); }
const INCIDENT={vegetation:["vegetation","scrub","grass","bush"],structure:["structure","house","dwelling","building"],medical:["medical","patient","unresponsive","status"],mva:["motor vehicle","mva","rtc","crash","collision"],alarm:["alarm","smoke alarm","fire alarm"],hazmat:["hazmat","chemical","gas leak","odour","odor","spillage"]};
function inferType(t){ t=(t||'').toLowerCase(); for(const[k,ws] of Object.entries(INCIDENT)){ if(ws.some(w=>t.includes(w))) return k; } return 'other'; }
function render(){
  const fil=document.getElementById('incidentFilter').value, q=(document.getElementById('search').value||'').toLowerCase();
  clearMarkers(); const list=document.getElementById('events'); list.innerHTML='';
  const filtered = allEvents.filter(ev=>{
    let ok=true; if(fil) ok=(ev.type||'').includes(fil);
    if(ok && q) ok=((ev.summary||'')+' '+(ev.transcript||'')+' '+(ev.address||'')+' '+(ev.station||'')).toLowerCase().includes(q);
    return ok;
  });
  filtered.forEach(ev=>{
    const el=document.createElement('div'); el.className='event';
    el.innerHTML = `<div><strong>${ev.summary||'Event'}</strong> ${ev.station?`<span class="badge stn">Station ${ev.station}</span>`:''}</div>
                    <div class="hint">${new Date(ev.timestamp).toLocaleString()}</div>
                    <div>${ev.address||'Unknown location'}</div>
                    <div class="hint">${ev.transcript||''}</div>`;
    list.appendChild(el); addMarker(ev);
  });
  if(filtered.length && filtered[0].lat && filtered[0].lon){ map.setView([filtered[0].lat,filtered[0].lon],12); }
}
render();
document.getElementById('incidentFilter').addEventListener('change',render);
document.getElementById('search').addEventListener('input',render);
document.getElementById('btnClear').addEventListener('click',()=>{ if(confirm('Clear all local events?')){ allEvents=[]; save(); render(); }});

/* ====== Address / Station extraction & geocoding ====== */
const ADDRESS_RE=new RegExp(String.raw`
  \\b(
    (?:
      SH\\s*\\d{1,3}|State\\s+Highway\\s+\\d{1,3}
    )
    (?:\\s*,?\\s*[A-Za-zĀĒĪŌŪāēīōū\\-\\s]+)?
    |
    \\d{1,5}\\s+
    [A-Za-zĀĒĪŌŪāēīōū0-9'\\-\\.\\s]+?
    \\b(?:Road|Rd|Street|St|Avenue|Ave|Lane|Ln|Drive|Dr|Highway|Hwy|Terrace|Terr|Place|Pl|Court|Ct|Crescent|Cres|Close|Cl|Way|Quay|Esplanade|Parade|Boulevard|Bvd|Track|Wharf|Rise|Grove|Loop|Square|View|Hill|Valley|Coast|Harbour|Harbor|Causeway|Bypass|State\\s+Highway|SH)
    (?:\\s*\\d+)?
    (?:\\s*,?\\s*[A-Za-zĀĒĪŌŪāēīōū\\-\\s]+)?
  )
`,'iux');
const INTERSECTION_RE=/\\b([A-Za-zĀĒĪŌŪāēīōū0-9'\\-\\.\\s]+?)\\s+(?:and|&|at)\\s+([A-Za-zĀĒĪŌŪāēīōū0-9'\\-\\.\\s]+?)\\b/i;
const STATION_RE=/\\b(?:Station|Stn|Stn\\.|Brigade|Pump(?:er)?)\\s*([0-9]{1,4})\\b/i;

function extractAddress(t){ const m=ADDRESS_RE.exec(t||''); if(m) return m[1].trim(); const m2=INTERSECTION_RE.exec(t||''); if(m2) return `${m2[1].trim()} and ${m2[2].trim()}`; return ''; }
function extractStation(t){ const m=STATION_RE.exec(t||''); return m ? m[1] : ''; }

async function geocodeNZ(q){
  try{
    const u=new URL('https://nominatim.openstreetmap.org/search');
    u.searchParams.set('q',q); u.searchParams.set('format','json'); u.searchParams.set('limit','1'); u.searchParams.set('countrycodes','nz');
    const r=await fetch(u.toString(),{headers:{'Accept':'application/json'}});
    const a=await r.json(); if(a&&a.length) return {lat:parseFloat(a[0].lat), lon:parseFloat(a[0].lon)};
  }catch(e){}
  return {lat:null, lon:null};
}

async function addEventFromTranscript(tr){
  const address=extractAddress(tr); const station=extractStation(tr);
  let lat=null,lon=null; if(address){ const g=await geocodeNZ(address); lat=g.lat; lon=g.lon; }
  const type=inferType(tr); const words=(tr||'').trim().split(/\s+/); const desc=words.slice(0,12).join(' ');
  const summary=(desc?type.charAt(0).toUpperCase()+type.slice(1)+' – '+desc:type.charAt(0).toUpperCase()+type.slice(1));
  const ev={timestamp:new Date().toISOString(), type, summary, station, address, lat, lon, transcript:tr};
  allEvents.unshift(ev); save(); render();

  // Auto-scroll + highlight newest + pan/open popup
  const container=document.getElementById('events');
  const first=container.firstElementChild; if(first){ first.classList.add('highlight'); first.scrollIntoView({behavior:'smooth', block:'start'}); setTimeout(()=>first.classList.remove('highlight'),1200); }
  if(lat&&lon){ map.setView([lat,lon],13); }
  // Open popup of the newest marker
  if(markers.length){ markers[markers.length-1].openPopup(); }
}

/* ====== Manual add ====== */
document.getElementById('btnAdd').addEventListener('click', async ()=>{
  const t=(document.getElementById('manual').value||'').trim(); if(!t) return;
  await addEventFromTranscript(t); document.getElementById('manual').value='';
});

/* ====== Mic level test + STT (only if HTTPS) ====== */
let audioCtx, analyser, micStream, recognizer=null, listening=false, liveBuf='';
const levelBar = document.getElementById('levelBar');
function tickLevel(){
  if(!analyser) return;
  const data=new Uint8Array(analyser.fftSize); analyser.getByteTimeDomainData(data);
  let sum=0; for(let i=0;i<data.length;i++){ const v=(data[i]-128)/128; sum+=v*v; }
  const rms=Math.sqrt(sum/data.length); const pct=Math.min(100, Math.max(0, Math.round(rms*180)));
  levelBar.style.width=pct+'%';
  requestAnimationFrame(tickLevel);
}

async function startMic(){
  if(!isSecure){ alert('Mic requires HTTPS. Host this on Netlify/Vercel to enable.'); return; }
  try{
    micStream = await navigator.mediaDevices.getUserMedia({audio:true});
    const C = window.AudioContext||window.webkitAudioContext; audioCtx = new C();
    const src=audioCtx.createMediaStreamSource(micStream); analyser=audioCtx.createAnalyser(); analyser.fftSize=2048; src.connect(analyser); tickLevel();
    document.getElementById('micHint').textContent='Mic active (speak to see level).';
  }catch(e){ document.getElementById('micHint').textContent='Mic blocked: '+e.name; }

  if(hasSpeech){
    const SR=window.SpeechRecognition||window.webkitSpeechRecognition; recognizer=new SR();
    recognizer.lang='en-NZ'; recognizer.continuous=true; recognizer.interimResults=true;
    recognizer.onresult=(ev)=>{ let interim='', final=''; for(let i=ev.resultIndex;i<ev.results.length;i++){const r=ev.results[i]; if(r.isFinal) final+=r[0].transcript; else interim+=r[0].transcript;}
      liveBuf=(liveBuf+' '+final+' '+interim).replace(/\s+/g,' ').trim(); document.getElementById('liveText').textContent=liveBuf||'(listening…)';
    };
    recognizer.onerror=(e)=>{ document.getElementById('liveText').textContent='Speech error: '+e.error; };
    recognizer.onend=()=>{ if(listening){ try{recognizer.start()}catch{} } };
    try{ recognizer.start(); listening=true; }catch{}
  }
  document.getElementById('btnMic').disabled=true; document.getElementById('btnStop').disabled=false;
}
function stopMic(){
  listening=false; if(recognizer) try{recognizer.stop()}catch{};
  if(micStream){ micStream.getTracks().forEach(t=>t.stop()); }
  analyser=null; audioCtx&&audioCtx.close&&audioCtx.close(); audioCtx=null; micStream=null;
  document.getElementById('btnMic').disabled=false; document.getElementById('btnStop').disabled=true;
  const t=liveBuf.trim(); if(t){ addEventFromTranscript(t); } liveBuf=''; document.getElementById('liveText').textContent='(stopped)';
}
document.getElementById('btnMic').addEventListener('click', startMic);
document.getElementById('btnStop').addEventListener('click', stopMic);
</script>
</body>
</html>
